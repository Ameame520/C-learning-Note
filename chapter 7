练习7-2 求最大值及其下标
分数 20
#include<stdio.h>
int main(void)
{
    int n;
    scanf("%d",&n);
    int arr[n];//定义一个不定长数组.
    for(int i=0;i<n;i++)
    {
        int num;
        scanf("%d",&num);
        arr[i]=num;
    }
    int max=arr[0],pos=0;
    for(int j=1;j<n;j++)
    {
        if(arr[j]>max){
            pos=j;
            max=arr[j];
        }
    }
    printf("%d %d",max,pos);
}

练习7-3 将数组中的数逆序存放
分数 20
#include<stdio.h>
int main(void)
{
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
    {
        int num;
        scanf("%d",&num);
        arr[i]=num;
    }
    for(int j=n-1;j>=0;j--)
    {
        printf("%d",arr[j]);
        if(j>0){printf(" ");}
    }
}

练习7-4 找出不是两个数组共有的元素
分数 20
#include<stdio.h>
int main(void)
{
    int n1,n2,num1,num2,num;
    //指定容量,输入arr1数组
    scanf("%d",&n1);
    int arr1[n1];
    for(int i=0;i<n1;i++)
    {
        scanf("%d",&num1);
        arr1[i]=num1;
    }
    //指定容量,输入arr2数组
    scanf("%d",&n2);
    int arr2[n2];
    for(int j=0;j<n2;j++)
    {
        scanf("%d",&num2);
        arr2[j]=num2;
    }
    //指定存放不同元素的数组arr3与下标k
    int arr3[20];
    int k=0;
    //flag1保证一个数组中出现的任意元素另一个数组中没有,flag2保证arr3中出现的元素不相同
    for(int i=0;i<n1;i++){
        num=arr1[i];
        int flag1=1,flag2=1;
        for(int j=0;j<n2;j++){
            if(arr2[j]==num){flag1=0;}
        }
        for(int r=0;r<k;r++){
            if(arr3[r]==num){flag2=0;}
        }
        if(flag1&&flag2){arr3[k++]=num;}
    }
    for(int i=0;i<n2;i++){
        num=arr2[i];
        int flag1=1,flag2=1;
        for(int j=0;j<n1;j++){
            if(arr1[j]==num){flag1=0;}
        }
        for(int r=0;r<k;r++){
            if(arr3[r]==num){flag2=0;}
        }
        if(flag1&&flag2){arr3[k++]=num;}
    }
    for(int i=0;i<k;i++){
        printf("%d",arr3[i]);
        if(i<k-1){printf(" ");}
    }
}

练习7-7 矩阵运算
分数 20
#include<stdio.h>
int main(void)
{
    int n;scanf("%d",&n);
    int arr[n][n];int sum=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++){
            scanf("%d",&arr[i][j]);
            //满足条件则相加
            if((i+j)!=n-1&&i!=n-1&&j!=n-1){sum+=arr[i][j];}
        }
    }
    printf("%d",sum);
}

练习7-8 方阵循环右移
分数 20
#include<stdio.h>
int main(void)
{
    int m,n;
    scanf("%d %d",&m,&n);
    int arr[n][n],ans[n][n];
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            scanf("%d",&arr[i][j]);
            //m=2时,a[0][0]变成a[0][2]
            ans[i][(j+m)%n]=arr[i][j];
        }
    }
    for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
        printf("%d ",ans[i][j]);
        }
        printf("\n");
    }
}

练习7-9 计算天数
分数 15
#include<stdio.h>
int isrun(int year){
    //能被四整除且不被100整除
    if((year%4==0&&year%100!=0)||(year%400==0)){return 1;}
    return 0;
}
int main(void)
{
    int y,m,d;
    scanf("%d/%d/%d",&y,&m,&d);
    int days1[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    int days2[12]={31,29,31,30,31,30,31,31,30,31,30,31};
    int days=0;
        for(int i=0;i<m-1;i++){
            if(isrun(y))
                days+=days2[i];
            else
                days+=days1[i];
        }
    days+=d;
    printf("%d",days);
}

练习7-10 查找指定字符
分数 15
#include<stdio.h>
int main(void)
{
    char c=getchar();
    char d;int i,index,flag;
    i=-1,flag=1;
    getchar();
    scanf("%c",&d);
    while(d!='\n'){
        i++;
        if(d==c){index=i; flag=0;}
        scanf("%c",&d);
    }
    if(!flag){
        printf("index = %d",index); 
    }
    else{printf("Not Found");}
}

练习7-11 字符串逆序
分数 15
#include<stdio.h>
int main(void){
char arr[80];char ch;int i=0;
    scanf("%c",&ch);
    while(ch!='\n'){
        arr[i++]=ch;
        scanf("%c",&ch);
    }
    for(int j=i-1;j>=0;j--){
        printf("%c",arr[j]);
    }
}

习题7-1 选择法排序
分数 20
#include<stdio.h>
    void InsertSort(int arr[],int n);
    void BubbleSort(int arr[],int n);
    void QuickSort(int arr[],int,int);
    int Partition(int arr[],int low,int high);
    void SelectSort(int arr[],int n);
    void MergeSort(int arr[],int high,int low);
    void Merge(int arr[],int low,int mid,int high);
int main(void)
{
    //输入数组信息(带哨兵)
    int n;scanf("%d",&n);
    int arr[n+1];
    int i=1;
    scanf("%d",&arr[i]);
    while(i<n){
    	i++;
        scanf("%d",&arr[i]);
    }
    //开始倒序排序 
//	  InsertSort(arr,n);
//    BubbleSort(arr,n);
//    QuickSort(arr,1,n);
//    SelectSort(arr,n);
    MergeSort(arr,1,n);
    for(int j=1;j<=n;j++){
        printf("%d",arr[j]);
            if(j<n){printf(" ");}
    }
}
  
void InsertSort(int arr[],int n){
    int i,j;
    for(i=2;i<=n;i++){
        //如果出现逆序,需要排序
        if(arr[i]>arr[i-1]){
            //哨兵存放待排序元素
            arr[0]=arr[i];
            for(j=i-1;arr[0]>arr[j];j--){//当满足"当前元素仍小于前面位置元素时,需移动所有逆序元素
                arr[j+1]=arr[j];
            }
            arr[j+1]=arr[0];
        }
    }
}
void BubbleSort(int arr[],int n){
    //不断地把最小的数字送到数组最后
    int i,j;
    //总共n-1趟
    for(i=0;i<n-1;i++){
        int flag=1;
        //每趟移动一个for循环定义的步数
        for(j=1;j<n-i;j++){
            if(arr[j]<arr[j+1])
            {int temp=arr[j];arr[j]=arr[j+1];arr[j+1]=temp; flag=0;}
    }
        if(flag){break;}
    }
}
int Partition(int arr[],int low,int high){
    //第一个元素设置为轴元素
    int pivot=arr[low];
    while(low<high){//左右逼近对齐
        while(arr[high]<=pivot&&low<high){high--;}
        arr[low]=arr[high];
        while(arr[low]>=pivot&&low<high){low++;}
        arr[high]=arr[low];
    }
    arr[low]=pivot;
    return low;
}
void QuickSort(int arr[],int low,int high){
    //快速排序为递归思想,只要待排序元素个数大于1,即low<high,需要下一次排序
   //如果用 while(low<high),因为low high值不会在函数中改变,所以出不去循环
   if(low<high) 
    {
        int pos=Partition(arr,low,high);
        QuickSort(arr,low,pos-1);
        QuickSort(arr,pos+1,high);
    }
}
void SelectSort(int arr[],int n){
    int i, j;
    //进行n-1趟,每趟找到最大的元素放在第i个位置.
    for(i=1;i<n;i++){
        for(j=i+1;j<=n;j++){
            if(arr[j]>arr[i]){int temp=arr[i]; arr[i]=arr[j];arr[j]=temp;}
        }
    }
}
void Merge(int arr[],int low,int mid,int high){
    //复制数据到copy数组中
    int k=high+1,i=low;
    int j;
    int copy[k];
    while(i<k){
    copy[i]=arr[i];
    i++;
    }
    i=low,j=mid+1,k=low;
    while(i<=mid&&j<=high){
        if(copy[j]>copy[i]){arr[k++]=copy[j++];}
        else{arr[k++]=copy[i++];}
    }
    while(i<=mid){arr[k++]=copy[i++];}
    while(j<=high){arr[k++]=copy[j++];}         
}
void MergeSort(int arr[],int low,int high)
{
    if(low<high)
    {
    int mid=(low+high)/2;
    MergeSort(arr,low,mid);
    MergeSort(arr,mid+1,high);
    Merge(arr,low,mid,high);
    }
}

习题7-2 求一批整数中出现最多的个位数字
分数 20
#include <stdio.h>
void load(int num[],int x){
    if(!x){num[0]++;}
    else{
	while(x>0){
		int k=x%10;
		num[k]++;
		x/=10;
	 }
    }
}
int main(void)
{
	//读取信息,存在数组中 
    int n;scanf("%d",&n);
    int arr[n]; int i,j;
    for(i=0;i<n;i++)
    {scanf("%d",&arr[i]);}
    //把每位数字出现的次数统计到数组num中 
    int num[10]={0};
    for(j=0;j<n;j++){
    	load(num,arr[j]);
	}
	int max=0;
	//
	for(i=0;i<10;i++){
		if(num[i]>=max) 
		max=num[i];	
	} 
	printf("%d:",max);
	for(i=0;i<10;i++)
	{
		if(num[i]==max){printf(" %d",i);
		}
	}
}

习题7-5 找鞍点
分数 20
#include<stdio.h>
int main(void)
{
    int n;scanf("%d",&n);
    int arr[n][n];
    for(int i=0;i<n;i++)
    {

        for(int j=0;j<n;j++)
        {
            scanf("%d",&arr[i][j]);
            }
        }
    
int posi,posj,flag0=0;
    for(int i=0;i<n;i++)
    {
        //遍历当前行,寻找最大的元素之一(如有一样大的,统计最后一个)
        int max=arr[i][0];
        for(int j=0;j<n;j++)
        {
            if(arr[i][j]>=max){max=arr[i][j]; posi=i; posj=j;}
        }
        int k=0,flag=1;
        //该元素应该是当前列最小的元素之一
        while(k<n){
            if (arr[posi][posj]>arr[k][posj]){flag=0;}
            k++;
        }
        if(flag){printf("%d %d\n",posi,posj); flag0=1;}
    }
if(!flag0){printf("NONE");}
}

习题7-6 统计大写辅音字母
分数 15
#include<stdio.h>
int main(void)
{
    char c; int count=0;
    scanf("%c",&c);
    while(c!='\n'){
        if(c>='A'&&c<='Z'){
            if(c!='A'&&c!='E'&&c!='I'&&c!='O'&&c!='U'){count++;}
        }
        scanf("%c",&c);
    }
    printf("%d",count);
}

习题7-7 字符串替换
分数 15
#include<stdio.h>
int main(void)
{
    char c;
    scanf("%c",&c);
    while(c!='\n'){
        if(c>='A'&&c<='Z'){
            int delta=c-'A';
            char d='Z'-delta;
            printf("%c",d);
        }
        else{printf("%c",c);}
        scanf("%c",&c);
    }
}

习题7-8 字符串转换成十进制整数
分数 15
#include<stdio.h>
#include<math.h>
int main(void)
{
    char c;
    char prior='+';
    int flag=1,i=0;
    char ch[10]={};
    scanf("%c",&c);
    while(c!='#'){
        //读入字符串,如果读取到符号,做标记,如果读取到十六进制数,记录在ch数组中
        if((c=='+'||c=='-')&&(flag==1)){prior=c;}
        else if((c>='a'&&c<='f')||(c>='0'&&c<='9')||(c>='A'&&c<='F')){flag=0;ch[i++]=c;}
        scanf("%c",&c);
    }
    int temp=i,sum=0;
    int arr[10];
    //将字符串数组用对应数字拷贝到数字数组中
    for(i=0;i<temp;i++){
        switch(ch[i]){
            case '0':
                arr[i]=0;
                break;
            case '1':
                arr[i]=1;
                break;
            case '2':
                arr[i]=2;
                break;
            case '3':
                arr[i]=3;
                break;
            case '4':
                arr[i]=4;
                break;
            case '5':
                arr[i]=5;
                break;
            case '6':
                arr[i]=6;
                break;
            case '7':
                arr[i]=7;
                break;
            case '8':
                arr[i]=8;
                break;
            case '9':
                arr[i]=9;
                break;
            case 'a':
                arr[i]=10;
                break;
            case 'A':
                arr[i]=10;
                break;
            case 'b':
                arr[i]=11;
                break;
            case 'B':
                arr[i]=11;
                break;
            case 'c':
                arr[i]=12;
                break;
            case 'C':
                arr[i]=12;
                break;
            case 'd':
                arr[i]=13;
                break;
            case 'D':
                arr[i]=13;
                break;
            case 'e':
                arr[i]=14;
                break;
            case 'E':
                arr[i]=14;
                break;
            case 'f':
                arr[i]=15;
                break;
            case 'F':
                arr[i]=15;
                break;
        }
    }
    for(int j=0;j<i;j++){
        sum+=arr[i-j-1]*pow(16,j);
    }
    if(prior=='-'){sum*=-1;}
    printf("%d",sum);
}
